




 
.row.horizontal-icons { 
  display:flex; margin-bottom:10px; 
}

.column.vertical-icons { 
   display:flex; 
   flex-direction:column; 
}
  
.vertical-icons {
  display: flex;
  flex-wrap: wrap;        
  gap: 11px;              
  justify-content: flex-start;
  align-items: center;
  width: 100px;            


.vertical-icons .icon {
  width: 32px;            
  height: 32px;          
  cursor: pointer;
}

.icon {
  margin:2px; 
  cursor:pointer; 
}
  
.icon.clicked img { 
  border: 2px solid #007BFF; 
  border-radius: 4px; 
}

let apBands = []; 


let currentHorizontalIndex = 0;
let currentVerticalIndex = 0;
let title_vertical = "";
let title_horizontal = "";

const bandImages = {
  "2.4": ["/galileu/img/2GHz.png", "/galileu/img/2GHz_active.png"],
  "5": ["/galileu/img/5GHz.png", "/galileu/img/5GHz_active.png"],
  "6": ["/galileu/img/6GHz.png", "/galileu/img/6GHz_active.png"]
};

// Imagens verticais: key = option, value = [inativa, ativa]
const verticalImages = {
  top_wifi: ["/galileu/img/load.png", "/galileu/img/load_active.png", "WiFi Load %"],
  top_nonwifi: ["/galileu/img/interference.png", "/galileu/img/interference_active.png", "Interference %"],
  top_lost: ["/galileu/img/lost.png", "/galileu/img/lost_active.png", "Frame Loss"],
  top_events: ["/galileu/img/switched.png", "/galileu/img/switched_active.png", "#Switched Channels"],
  top_clients: ["/galileu/img/clients.png", "/galileu/img/clients_active.png", "#Clients"],
  return: ["/galileu/img/tables.png", "/galileu/img/tables_active.png"]
};




    function onHorizontalClick(networkName, index, band, selectedRange) {
      if (index === currentHorizontalIndex) return;
      const icons = horizontalIconsContainer.querySelectorAll('.icon');
      // Desativa anterior
      const prevImg = icons[currentHorizontalIndex].querySelector('img');
      const prevBand = apBands[currentHorizontalIndex];
      prevImg.src = bandImages[prevBand][0];
      icons[currentHorizontalIndex].classList.remove('clicked');
      // Ativa novo
      const newImg = icons[index].querySelector('img');
      newImg.src = bandImages[band][1];
      icons[index].classList.add('clicked');
      title_horizontal  = `${band} GHz`;
      currentHorizontalIndex = index;

      // Chamada da função de gráficos
      await showChartsForNetwork(networkName, selectedRange);
    }


    function onVerticalClick(networkName, index, option, selectedRange) {
      if (index === currentVerticalIndex) return;
      const icons = verticalIconsContainer.querySelectorAll('.icon');
      const keys = Object.keys(verticalImages);
      // Desativa anterior
      const prevImg = icons[currentVerticalIndex].querySelector('img');
      prevImg.src = verticalImages[keys[currentVerticalIndex]][0];
      icons[currentVerticalIndex].classList.remove('clicked');
      // Ativa novo
      const newImg = icons[index].querySelector('img');
      newImg.src = verticalImages[option][1];
      icons[index].classList.add('clicked');
      title_vertical = verticalImages[option][2];
      currentVerticalIndex = index;
      current_option = option;

      // Chamada da função de gráficos
      await showChartsForNetwork(networkName, selectedRange);
    }


    function initHorizontalIcons(networkName, selectedRange) {
      const horizontalIconsContainer = document.getElementById('horizontal-icons-row');
      horizontalIconsContainer.innerHTML = '';
      apBands.forEach((band, index) => {
        if (!bandImages[band]) return; // se o AP não suporta, não adiciona
        const div = document.createElement('div');
        div.className = index === 0 ? 'icon clicked' : 'icon';
        const img = document.createElement('img');
        img.src = index === 0 ? bandImages[band][1] : bandImages[band][0];
        img.width = 32;
        img.height = 21;
        img.alt = `WiFi ${band} GHz`;
        img.title = `WiFi ${band} GHz`;
        img.onclick = () => onHorizontalClick(networkName, index, band, selectedRange);
        div.appendChild(img);
        horizontalIconsContainer.appendChild(div);
      });
    }


    function initVerticalIcons(networkName, selectedRange) {
      const verticalIconsContainer = document.getElementById('vertical-icons-col');
      verticalIconsContainer.innerHTML = '';
      Object.keys(verticalImages).forEach((key, index) => {
        const div = document.createElement('div');
        div.className = index === 0 ? 'icon clicked' : 'icon';
        const img = document.createElement('img');
        img.src = index === 0 ? verticalImages[key][1] : verticalImages[key][0];
        img.width = 32;
        img.height = 32;
        img.alt = key;
        img.title = key;
        img.onclick = () => onVerticalClick(networkName, index, key, selectedRange);
        div.appendChild(img);
        verticalIconsContainer.appendChild(div);
      });
    }


    async function configChartsForNetwork(networkName) {
      clearCircles();
      const networkSpan = document.querySelector(`.network-title[data-network="${networkName}"] span[style="flex: 1 1 0%; cursor: pointer;"]`);
      if (networkSpan) {
        networkSpan.click();  // Simula o clique no span que contém o nome da rede
      }

      const selectedRange = document.getElementById("time-range-select").value;
      
      // Substitui o conteúdo da tabela por gráficos (stack e donut)
      let channel_container = document.getElementById("channel-table-container");

      // Exibe gráficos com base na Network clicada
      channel_container.innerHTML = `
        <div id="charts-container" style="display:flex; width:1045px; height:230px;">
          <div id="icons-container" style="display:flex; flex-direction:column; align-items:center; margin-top:10px; margin-bottom:10px;">
            <div class="row horizontal-icons" id="horizontal-icons-row">
            </div>
            <div class="column vertical-icons" id="vertical-icons-col">
            </div>
          </div>
          <div id="stack-chart-container" style="flex:3; height:230px; display:flex; align-items:center; justify-content:center;">
            <canvas id="stack-chart" style="height:230px; width:100%;"></canvas>
          </div>
          <div id="donut-chart-container" style="padding-left:30px; flex:1; height:100%; display:flex; align-items:center; justify-content:center;">
            <canvas id="donut-chart" style="height:180px; width:180px;"></canvas>
          </div>
        </div>
      `;

      currentHorizontalIndex = 0;
      currentVerticalIndex = 0;
      current_option = "top_wifi";

      try {
        let res = await fetch(`/api/galileu/v1.0/woc/channel/bandsintonets?org_id=${org_id}`);
        if (res.ok) {
          let data = await res.json();
          const networkObj = data.bandsintonets.find(n => n.network_name === networkName);
          apBands = networkObj.band;
        } else {
          console.warn("Failed to fetch bandsintonets");
          return(nul);
        }
      } catch (e) {
        console.error("Error parsing bandsintonets: ", e);
        return(null);
      }     

      initHorizontalIcons(networkName, selectedRange);
      initVerticalIcons(networkName, selectedRange);
            
      await showChartsForNetwork(networkName, selectedRange);


    async function showChartsForNetwork(networkName, selectedRange) {
      let alrt = document.getElementById('alert-popup');
      if (alrt) {
          alrt.remove();
      }
      
      // Substitui o conteúdo da tabela por gráficos (stack e donut)
      let channel_container = document.getElementById("channel-table-container");

      let new_type = current_option + "_" + "nets";
      
      let data = await getChartsForNetwork(new_type, selectedRange);
      if (data == null) {
          return;
      }
      let top_nets = data.top_nets;
      new_type = current_option + "_" + "aps";
      data = await getChartsForAP(networkName, new_type, apBands[currentHorizontalIndex], selectedRange);
      if (data == null) {   
          return;
      }
      let top_aps = data.top_aps;
      if (top_aps.length == 0) {
        showAlertPopup("No record found !!!", window.innerWidth / 2 - 200, window.innerHeight / 2 + 150);
      } 

      let labels = top_aps.map(item => item.ap_name);
      let valueMaxPercentages = top_aps.map(item => item.value_max_percentage);
      let valueMeanPercentages = top_aps.map(item => item.value_mean_percentage);

      let canvasStack = document.getElementById('stack-chart');
      let ctxStack = canvasStack.getContext('2d');
    
      // Redefine o tamanho do canvas antes de qualquer outra coisa
      canvasStack.width = canvasStack.offsetWidth; // Largura do container
      canvasStack.height = 230; // Altura fixa do gráfico

      // Limpe o canvas antes de adicionar o gráfico
      canvasStack.width = canvasStack.width;  // Limpa o canvas

      // Se o gráfico existir, destrua antes de recriar
      if (stackChart) {
        stackChart.destroy();
      }

      let title_stack = title_vertical + " - " + tile_horizontal;

      if (title_stack.includes("Switched Channels")) {
        stackChart = new Chart(ctxStack, {
          type: 'bar',
          data: {
            labels: labels, 
            datasets: [{
              label: 'Max',
              data: valueMaxPercentages,
              backgroundColor: 'rgba(248, 117, 0, 0.9)',
              borderColor: 'rgba(248, 117, 0, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              title: {
                display: true,
                text: title_stack,
                font: {
                  size: 12 
                }
              },
              legend: {
                display: false 
              }
            },
            scales: {
              x: {
                beginAtZero: true
              },
              y: {
                beginAtZero: true
              }
            },
            elements: {
              bar: {
                barThickness: 50
              }
            },

            onClick: function (event, elements) {
              if (elements.length > 0) {
                  const index = elements[0].index;
                  const label = this.data.labels[index]; 
                  generateChannelUtilizationChart(networkName, label, current_band, selectedRange);
              }
            }         
          }
        });

      } else {
        stackChart = new Chart(ctxStack, {
          type: 'bar',
          data: {
            labels: labels, 
            datasets: [{
              label: 'Max',
              data: valueMaxPercentages,
              backgroundColor: 'rgba(248, 117, 0, 0.9)',
              borderColor: 'rgba(248, 117, 0, 1)',
              borderWidth: 1
            }, {
              label: 'Mean',
              data: valueMeanPercentages,
              backgroundColor: 'rgba(255, 165, 0, 0.6)',
              borderColor: 'rgba(255, 165, 0, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            plugins: {
              title: {
                display: true,
                text: title_stack,
                font: {
                  size: 12 
                }
              },
              legend: {
                display: false 
              }
            },
            scales: {
              x: {
                beginAtZero: true
              },
              y: {
                beginAtZero: true
              }
            },
            elements: {
              bar: {
                barThickness: 50
              }
            },

            onClick: function (event, elements) {
              if (elements.length > 0) {
                  const index = elements[0].index;
                  const label = this.data.labels[index]; 
                  generateChannelUtilizationChart(networkName, label, current_band, selectedRange);
              }
            }         
          }
        });
      }

      stackChart.resize();

      labels = top_nets.map(item => item.network_name);
      let relativePercentages = top_nets.map(item => item.relative_percentage);
      
      let canvasDonut = document.getElementById('donut-chart');
      let ctxDonut = canvasDonut.getContext('2d');

      // Redefine o tamanho do canvas de donut
      canvasDonut.width = canvasDonut.offsetWidth; // Largura do container
      canvasDonut.height = 180; // Altura fixa do gráfico

      // Limpe o canvas antes de adicionar o gráfico
      canvasDonut.width = canvasDonut.width;  // Limpa o canvas
  
      // Se o gráfico de donut existir, destrua antes de recriar
      if (donutChart) {
        donutChart.destroy();
      }

      title_donut = "Networks (" + title_horizontal ")";

      donutChart = new Chart(ctxDonut, {
        type: 'doughnut',
        data: {
          labels: labels,  
          datasets: [{
            data: relativePercentages,  
            backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 99, 132, 0.6)'],  
            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)', 'rgba(255, 99, 132, 1)'],  
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: title_donut,
              font: {
                size: 12  
              }
            },
            legend: {
              position: 'top', 
            }
          }
        }
      });

      donutChart.resize();

    }